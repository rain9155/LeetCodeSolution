package easy.leetcode401;

import java.util.ArrayList;
import java.util.List;

/**
 * 二进制手表:
 * 二进制手表顶部有 4 个 LED 代表小时（0-11），底部的 6 个 LED 代表分钟（0-59）。
 * 每个 LED 代表一个 0 或 1，最低位在右侧。
 * 例如，上面的二进制手表读取 “3:25”。
 * 给定一个非负整数 n 代表当前 LED 亮着的数量，返回所有可能的时间。
 *
 * 案例:
 * 输入: n = 1
 * 返回: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
 *
 * 注意事项:
 * 输出的顺序没有要求。
 * 小时不会以零开头，比如 “01:00” 是不允许的，应为 “1:00”。
 * 分钟必须由两位数组成，可能会以零开头，比如 “10:2” 是无效的，应为 “10:02”。
 */
public class Solution {

    /**
     * 位运算：
     * 分别遍历(0, 12)小时和(0, 60)分钟，统计1出现的个数，如果n小时1的个数加上m分钟1的个数等于num，那么n：m就是一个结果
     * 这是因为二进制表中每一个LED灯的二进制位都只有一个1，每一个亮起的LED灯相互组合就可以代表时钟中的所有数字
     * 例如num = 3，3:01就是其中一个结果
     * 因为3的二进制为0011, 它由顶部的 4 个 LED中的0001和0010相互组合而成（由2个1）， 01的二进制位为0001，它由底部的 6 个 LED 中的0001组合而成（有1个1）
     * 而3和02的二进制中1的个数相加就是3
     */
    public List<String> readBinaryWatch(int num) {
        List<String> ret = new ArrayList<>();
        for(int i = 0; i < 12; i++){
            for(int j = 0; j < 60; j++){
                if(Integer.bitCount(i) + Integer.bitCount(j) == num){
                    ret.add(i + ":" + (j < 10 ? "0" + j : j));
                }
            }
        }
        return ret;
    }

}
