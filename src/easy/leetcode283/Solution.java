package easy.leetcode283;

/**
 * 移动零:
 * 给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。
 *
 * 示例:
 * 输入: [0,1,0,3,12]
 * 输出: [1,3,12,0,0]
 *
 * 说明:
 * 必须在原数组上操作，不能拷贝额外的数组。
 * 尽量减少操作次数。
 */
public class Solution {

    /**
     * 双指针：
     * 1、初始化两个指针p1，p2都指向nums的第一个元素，p1为慢指针，p2为快指针
     * 2、当p2指向的元素是0时，移动p2，p1保持不动，直到p2指向的元素不为0，这时把p2指向的元素赋值给p1指向的位置，然后移动p1到下一个位置
     * 3、重复2，直到p2遍历完nums，这样就能把nums中所有非零数字按顺序的移动到nums的前端
     * 4、最后只需要把非零数字后的位置，从p1开始，用0填充， 这样0都在数组的末尾
     */
    public void moveZeroes(int[] nums) {
        int p1 = 0, p2 = 0;
        while (p2 < nums.length){
            if(nums[p2] != 0){
                nums[p1++] = nums[p2];
            }
            p2++;
        }
        while (p1 < nums.length){
            nums[p1++] = 0;
        }
    }

}
