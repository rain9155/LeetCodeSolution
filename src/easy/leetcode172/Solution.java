package easy.leetcode172;

/**
 * 阶乘后的零：
 * 给定一个整数 n，返回 n! 结果尾数中零的数量。
 * 示例 1:
 * 输入: 3
 * 输出: 0
 * 解释: 3! = 6, 尾数中没有零。
 * 示例 2:
 * 输入: 5
 * 输出: 1
 * 解释: 5! = 120, 尾数中有 1 个零.
 */
public class Solution {

    /**
     * 找出阶乘中5的个数：
     * 10！ = 【 2 *（ 2 * 2 ）* 5 *（ 2 * 3 ）*（ 2 * 2 * 2 ）*（ 2 * 5）】
     * 在 10！这个阶乘数中可以匹配两对 2 * 5 ，所以10！末尾有 2 个 0。
     * 可以发现，一个数字进行拆分后 2 的个数肯定是大于 5 的个数的，所以能匹配多少对取决于 5 的个数.
     * 所以，要求阶乘后的零的个数，只需要求n分解后5的个数
     *
     * 需要注意的是，像 25，125 这样的特殊情况：
     * 比如 n=25，按照n / 5 = 5，得出25中有5个5，分别来自其中的5, 10, 15, 20, 25
     * 但其实25中有6个5，因为25可以继续分解为5 * 5， 25中5的个数 = 25 / 5 + 1 = 6
     * 所以除了计算 n/5 ， 还要计算 n/5/5 , n/5/5/5 , n/5/5/5/5 , ..., n/5/5/5,,,/5直到商为0，然后求和即可.
     * 得出n中5的个数 = n / 5 + n / 5^2 + ... + n / 5 ^i
     */
    public int trailingZeroes(int n) {
        return n == 0 ? n : n / 5 + trailingZeroes(n / 5);
    }

}
