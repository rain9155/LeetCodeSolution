package easy.leetcode172;

/**
 * 阶乘后的零：
 * 给定一个整数 n，返回 n! 结果尾数中零的数量。
 * 示例 1:
 * 输入: 3
 * 输出: 0
 * 解释: 3! = 6, 尾数中没有零。
 * 示例 2:
 * 输入: 5
 * 输出: 1
 * 解释: 5! = 120, 尾数中有 1 个零.
 */
public class Solution {

    /**
     * 找出阶乘中5的个数：
     * 10！ = 【 2 *（ 2 * 2 ）* 5 *（ 2 * 3 ）*（ 2 * 2 * 2 ）*（ 2 * 5）】
     * 在 10！这个阶乘数中可以匹配两对 2 * 5 ，所以10！末尾有 2 个 0。
     * 可以发现，一个数字进行拆分后 2 的个数肯定是大于 5 的个数的，所以能匹配多少对取决于 5 的个数.
     * 需要注意的是，像 25，125 这样的不只含有一个 5 的数字的情况需要考虑进去。
     * 比如 n = 15。那么在 15! 中 有 3 个 5 (来自其中的5, 10, 15)， 所以计算 n/5 就可以 。
     * 但是比如 n=25，依旧计算 n/5 ，可以得到 5 个5，分别来自其中的5, 10, 15, 20, 25，但是在 25 中其实是包含 2 个 5 的，这一点需要注意。
     * 所以除了计算 n/5 ， 还要计算 n/5/5 , n/5/5/5 , n/5/5/5/5 , ..., n/5/5/5,,,/5直到商为0，然后求和即可。
     */
    public int trailingZeroes(int n) {
        return n == 0 ? n : n / 5 + trailingZeroes(n / 5);
    }

}
