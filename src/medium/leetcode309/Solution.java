package medium.leetcode309;

/**
 * 最佳买卖股票时机含冷冻期:
 * 给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。​
 * 设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:
 *
 * 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。
 * 卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
 *
 * 示例:
 * 输入: [1,2,3,0,2]
 * 输出: 3
 * 解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]
 */
public class Solution {

    /**
     * 动态规划：
     * 定义两个状态：持有股票和不持有股票
     *
     * 每天的选择：如果当天持有股票，说明这一天买入股票或者保持前一天持有股票的利润；
     *            如果当天不持有股票，说明这一天卖出股票或者保持前一天不持有股票的利润；
     *
     * 状态转移方程为：
     * dp[i][0] = max(dp[i - 2][1] - prices[i], dp[i - 1][0])
     *            如果这一天买入股票，则这一天的利润为前两天(冷冻期)不持有股票的利润减去今天买入股票的钱；
     *            如果这一天没有买入股票，则这一天的利润为前一天持有股票的利润；
     *            最终取两者的最大值；
     * dp[i][1] = max(dp[i - 1][0] + prices[i], dp[i - 1][1])
     *            如果这一天卖出股票，则这一天的利润为前一天持有股票的利润加上今天卖出股票的钱；
     *            如果这一天没有卖出股票，则这一天的利润为前一天没有持有股票的利润；
     *            最终取两者的最大值；
     * dp[i][0]表示第i天持有股票的最大利润，dp[i][1]表示第i天不持有股票的最大利润
     *
     * 最终手上没有股票持有，代表所有股票卖出，这时才能获得最大收益， 返回dp[prices.length - 1][1]
     */
    public int maxProfit(int[] prices) {
        if(prices.length == 0){
            return 0;
        }
        int[][] dp = new int[prices.length + 1][2];
        //base条件：当没有股票时
        dp[0][0] = Integer.MIN_VALUE;
        dp[0][1] = 0;
        //base条件：当只有一支股票时
        dp[1][0] = -prices[0];
        dp[1][1] = 0;
        for(int i = 1; i < prices.length; i++){
            dp[i + 1][0] = Math.max(dp[i - 1][1] - prices[i], dp[i][0]);
            dp[i + 1][1] = Math.max(dp[i][0] + prices[i], dp[i][1]);
        }
        return dp[prices.length][1];
    }

}
