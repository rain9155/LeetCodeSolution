package medium.leetcode153;

/**
 * 寻找旋转排序数组中的最小值：
 * 假设按照升序排序的数组在预先未知的某个点上进行了旋转。
 * ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。
 * 请找出其中最小的元素。
 * 你可以假设数组中不存在重复元素。
 * 示例 1:
 * 输入: [3,4,5,1,2]
 * 输出: 1
 * 示例 2:
 * 输入: [4,5,6,7,0,1,2]
 * 输出: 0
 */
public class Solution {

    /**
     * 二分搜索:
     * 通过二分查找不断缩小范围，目标值的要求是小于左右相邻的值 三个重新界定左右边界的条件
     * 右边界小于左边界，且mid位置的值小于右边界，说明最小值在旋转后的数组的右半段。
     * 右边界大于左边界，说明范围内数组由小到大排列，直接收敛r=l。
     * mid位置的值大于右边界，说明最小值在mid值的右边。
     */
    public int findMin(int[] nums) {
        int l = 0, r = nums.length - 1;
        while (l < r) {
            int mid = (r - l) / 2 + l;
            if (nums[mid] < nums[r]) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return nums[l];
    }

}
