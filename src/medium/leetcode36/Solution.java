package medium.leetcode36;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;

/**
 * 有效的数独:
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 数字 1-9 在每一行只能出现一次。
 * 数字 1-9 在每一列只能出现一次。
 * 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 示例 1:
 * 输入:
 * [
 *   ["5","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: true
 * 
 * 示例 2:
 * 输入:
 * [
 *   ["8","3",".",".","7",".",".",".","."],
 *   ["6",".",".","1","9","5",".",".","."],
 *   [".","9","8",".",".",".",".","6","."],
 *   ["8",".",".",".","6",".",".",".","3"],
 *   ["4",".",".","8",".","3",".",".","1"],
 *   ["7",".",".",".","2",".",".",".","6"],
 *   [".","6",".",".",".",".","2","8","."],
 *   [".",".",".","4","1","9",".",".","5"],
 *   [".",".",".",".","8",".",".","7","9"]
 * ]
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 *      但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 
 * 说明:
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 给定数独序列只包含数字 1-9 和字符 '.' 。
 * 给定数独永远是 9x9 形式的。
 *
 * [
 * ["8","3",".",".","7",".",".",".","."],
 * ["6",".",".","1","9","5",".",".","."],
 * [".","9","8",".",".",".",".","6","."],
 * ["8",".",".",".","6",".",".",".","3"],
 * ["4",".",".","8",".","3",".",".","1"],
 * ["7",".",".",".","2",".",".",".","6"],
 * [".","6",".",".",".",".","2","8","."],
 * [".",".",".","4","1","9",".",".","5"],
 * [".",".",".",".","8",".",".","7","9"]
 * ]
 */
public class Solution {


    /**
     * O(1)：因为我们只对 81 个单元格进行了一次迭代
     * 遍历数独。
     * 检查看到每个单元格值是否已经在当前的行 / 列 / 子数独中出现过
     * 如果出现重复，返回 false
     * 如果没有，则把此值用Map保存进行进一步跟踪
     */
    public boolean isValidSudoku(char[][] board) {

        Map<Integer, Integer>[] rows = new HashMap[9];
        Map<Integer, Integer>[] columns = new HashMap[9];
        Map<Integer, Integer>[] boxes = new HashMap[9];

        for(int i = 0; i < 9; i++){
            rows[i] = new HashMap<>();
            columns[i] = new HashMap<>();
            boxes[i] = new HashMap<>();
        }

        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                int num = board[i][j];
                if(num != '.'){
                    int n =  (int)num;//当前数字
                    int box_index = (i / 3) * 3 + j / 3;//算出当前 3x3 宫格的的位置

                    //取出当前行该数字出现的次数
                    int row = rows[i].getOrDefault(n, 0);
                    //如果之前行出现过1次这个数字，直接返回false
                    if(row >= 1) return false;

                    //取出当前列该数字出现的次数
                    int column = columns[j].getOrDefault(n, 0);
                    //如果之前列出现过1次这个数字，直接返回false
                    if(column >= 1) return false;

                    //取出当前 3x3 宫格中当前数字出现的次数
                    int box = boxes[box_index].getOrDefault(n, 0);
                    //如果之前 3x3 宫格中当前数字出现过1次
                    if(box >= 1) return false;

                    //每行用Map记录下数字与数字出现的次数的映射
                    rows[i].put(n,  row + 1);

                    //每列用Map记录下数字与数字出现的次数的映射
                    columns[j].put(n, column + 1);

                    //每个 3x3 宫格用Map记录下数字与该数字出现的次数映射
                    boxes[box_index].put(n, box + 1);
                }
            }
        }
        return true;
    }

}
